function demo(mode)
%demo(mode)
%
%mode:
%  'regulon'
%    Runs a comparison of all CLR methods on Regulon DB sized network (not
%    as good as using the full dataset); takes < 30 minutes
%  'plos'
%    Replicates the steps to build the full network of the type used in the
%    PLoS paper (but requires M3D build 3 dataset!!!!)  Results will differ
%    slightly from the PLoS dataset.  This is how you build a large network
%    using clr.
%  'misc'
%    Demoes various miscellaneous functions in this distribution.
%
%This demo must be run from the Code/ directory

%load the compendium
load E_coli_v3_Build_3.mat
load reg_b3.mat
load tfs_b3.mat

if strmatch('regulon', mode, 'exact')
	%compare performance of different variants of CLR on regulon-sized networks
	[Anormal, MI] = clr(data.rma(reg_b3.ps_idx, :), 'normal', 10, 3);
	Arayleigh = clr(MI, 'rayleigh');
	Abeta = clr(MI, 'beta');
	Astouffer = clr(MI, 'stouffer');
	Akde = clr(MI, 'kde');
	Aplos = clr(MI, 'plos');
	
	%remove non-TF data
	zidx = setdiff(1:length(reg_b3.ps_idx), reg_b3.tfidxTest);
	Anormal(:, zidx) = 0;
	Arayleigh(:, zidx) = 0;
	Abeta(:, zidx) = 0;
	Astouffer(:, zidx) = 0;
	Akde(:, zidx) = 0;
	Aplos(:, zidx) = 0;

	[prec, sens, spec, pval] = matrixPvalue(Aplos, Akde, Arayleigh, Abeta, Anormal, Astouffer, reg_b3.Atest, length(reg_b3.tfidxTest), 95, 0.01, 100, 10);
	figure
	plot(sens*100', prec*100', 'o');
	legend('PLoS method', 'KDE (epan)', 'Rayleigh', 'Beta', 'Stouffer gauss (unweighted)', 'Stouffer gauss (weighted)');
elseif (strmatch('plos', mode, 'exact'))
	%compute fast & coarse mutual information and a rayleigh map based on it using just the genes with b-numbers this step takes 20-30 minutes on a fast machine
	gidx = strmatch('CDS', data.probe_set_type');
	[A, MI] = clr(data.rma(gidx, :), 'normal', 7, 3);

	%z
	zidx = setdiff(1:length(gidx))
	A(:, tfs_b3.
	%and the following would build the same map with the automatically determined
	%bin count
	%[A, MI] = clr(data.rma(data.gidx, :), 'rayleigh', -1, 3);
	
	%if you had a mutual information table already, you could speed things up by giving it as an argument, e.g.:
	%A = clr(MI, 'rayleigh');
	
	%make a small, 'genes-only' compendium for the purpose of drawing the
	%map (compendium is used by the mapping function to calculate correlation signs)
	c.rma = single(data.rma(gidx, :));
	c.genes = data.genes(gidx);

	mapGenes({'lexA'}, c, A, findThreshold(A, 60), 1, 1, 'LexA map', 'lexA.ps2')
	fprintf('The map is ready; find the ''lexA.ps2'' file and open it using Adobe Illustrator or another program\n');

	%find a good choice of 20 informationally distant chips from 10 permutations:
	[bestChipIdx, prec, sens, setSize] = findBestChips(data.rma, 20, 10);
	
	%find a threshold at which the generated CLR map is 60% accurate (this works only in E. coli):
	t60 = findThreshold(A, 60);
	
	%compare chip selection strategies (see plot in the paper) - from 20 to 80 chips in step 5, repeat 10 times to estimate standard deviation:

	[prec, sens, setSize] = netSubsample(data.rma, 10, 'rayleigh', 20, 5, 80);
	
	%cluster chips to see which conditions are similar (note: there are
	%a lot of chips here - this step will be slow) (another note: this
	%can work for any compendium, but it should be similarly formatted):
	buildChipTree(data);
else
	fprintf('Unrecognized demo mode: %s\n', mode);
end

